### SERPENT ###
%token
	TPLUS="+"
	TMINUS="-"
	TMUL="*"
	TDIV="/"
	TEXP="**"
	TLPAREN="("
	TRPAREN=")"
	TNL
	UMINUS

%token <float> TNUM

%type <unit> program

%left "+" "-"
%left "*" "/"
%nonassoc UMINUS
%right "**"

%%

program: { }
	| program TNL { }
	| program expr TNL { Format.printf "%g@\n" $2 }

expr:
	TNUM { $1 }
	| expr "+" expr { $1 +. $2 }
	| expr "-" expr { $1 -. $2 }
	| expr "*" expr { $1 *. $2 }
	| expr "/" expr { $1 /. $2 }
	| expr "**" expr { $1 ** $2 }
	| "(" expr ")" { $1 }
	| "-" expr %prec UMINUS { -. $1 }

### LEX ###
{
	open Calc_gen
}

rule token = parse
	[' ' '\t'] { token lexbuf }
	| '\n' { TNL }
	| ['0'-'9']+ as s { TNUM(float_of_string s) }
	| '+' { TPLUS }
	| '-' { TMINUS }
	| '/' { TDIV }
	| '*' '*' { TEXP }
	| '*' { TMUL }
	| '(' { TLPAREN }
	| ')' { TRPAREN }
	| eof { TEOF }

### ML ###
let _ = 
	Calc_gen.parse Calc_lex.token (Lexing.from_channel stdin) (fun _ s ->
		Format.printf "%s\n" s;
		exit 1)

### INPUT ###
1 + 2 * 3
(1 + 2) * 3
- 1 ** 2
2**2**3
### OUTPUT ###
7
9
-1
256
### INPUT ###
1 2 +
### OUTPUT ###
syntax error, got TNUM, expected one of TDIV TEXP TMINUS TMUL TNL TPLUS
### END ###
